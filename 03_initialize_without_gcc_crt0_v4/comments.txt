
changelog:
Enbaled JTAG config on GPIOs
add enable_jtag_gpio=1 directive to config.txt

------------------------------


source setenv.sh
make clean
make 
make debug_files
make copySDcard_files









 Setting the Entry Point:
The first instruction to execute in a program is called the entry point.
linker script command ENTRY --> to set the entry point. 
ENTRY(symbol)
There are several ways to set the entry point. 
The linker will set the entry point by tryingeach of the following methods in order, 
and stopping when one of them succeeds:
_ the ‘-e’ entry command-line option;
_ the ENTRY(symbol) command in a linker script;
_ the value of the symbol start, if defined;
_ the address of the first byte of the ‘.text’ section, if present;
_ The address 0



MEMORY Command:
The linker’s default configuration permits allocation of all available memory.
 You canoverride this by using the MEMORY command.
 The MEMORY command describes the location and size of blocks of memory in the target.
 You can use it to describe which memory regions may be used by the linker,and whichmemory regions it must avoid.
You can then assign sections to particular memory regions
.The linker will set section addresses based on the memory regions, and will warn about regions that become too full.
 The linker will not shuffle sections around to fit into the available regions.
A linker script may contain at most one use of the MEMORY command. 
However, you candefine as many blocks of memory within it as you wish.
The syntax is:
MEMORY
{
    name [(attr)] : ORIGIN = origin, LENGTH = len
    ...
}
The name is a name used in the linker script to refer to the region.
The region name has no meaning outside of the linker script.
Region names are stored in a separate namespace, and will not conflict with symbol names, file names, or section names.
Each memoryregion must have a distinct name within the MEMORY command.
However you can add later alias names to existing memory regions command.

MEMORY
{
    rom (rx) : ORIGIN = 0, LENGTH = 256K
    ram (!rx) : org = 0x40000000, l = 4M
}



The  simplest  possible  linker  script  has  just  one  command:   ‘SECTIONS’.
You  use  the‘SECTIONS’ command to describe the memory layout of the output file.
Let’s assume your program consists only of code, initialized data, and uninitialized data.
These will be in the ‘.text’, ‘.data’, and ‘.bss’ sections, respectively.  
Let’s assume furtherthat these are the only sections which appear in your input files.
For this example, let’s say that the code should be loaded at address 0x10000, 
and that thedata should start at address 0x8000000. 
 Here is a linker script which will do that:
 SECTIONS
 {
     . = 0x10000;
     .text : { *(.text) }. = 0x8000000;
     .data : { *(.data) }
     .bss : { *(.bss) }
}
You  write  the  ‘SECTIONS’  command  as  the  keyword  ‘SECTIONS’,  followed  by  a  series  of symbol assignments
 and output section descriptions enclosed in curly braces.
 The first line inside the ‘SECTIONS’ command of the above example sets the value of thespecial symbol ‘.’,which is the location counter. 
If you do not specify the address of anoutput section in some other way (other ways are described later),
the address is set from the current value of the location counter.
The location counter is then incremented by the size of the output section.
At the start of the ‘SECTIONS’ command, the location counterhas the value ‘0’.





if you are are implementing your own OS kernel and don't want to rely on the C library
 provided by your compiler environment, you are in a so-called "freestanding" environment. 
 Special rules apply here, and in particular you'd have to convince your compiler to place itself in that mood. 
 How to do that is different from compiler to compiler, gcc has -ffreestanding




stop after compilation stage generate object file : relocatable elf

hello_world.o: ELF 64-bit LSB relocatable,



